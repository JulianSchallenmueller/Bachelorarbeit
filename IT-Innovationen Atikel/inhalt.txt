# Einleitung und Motivation

Cloud Computing ist heute in vielen Bereichen ein fester Bestandteil des Alltags.
Beim Begriff "Cloud" kommen bei vielen Menschen wohl als erstes diverse Cloud Storage Angebote in den Sinn: Dropbox, OneDrive und ähnliche Software finden sowohl privat als auch geschäftlich breite Verwendung. Neben den allgemein bekannten Cloud Storage Services sind auch die Streaming Plattform Netflix oder Microsoft Office 365 rein Cloud basierte Dienste.
Alle der oben genannten Produkte gehören dem Service Modell __Software as a Service__ (SaaS) an. SaaS stellt den umsatzstärksten Bereich dar, gefolgt von __Infrastructure as a Service__ (IaaS) an zweiter Stelle (vgl. [*Cloud_Buch] S. 22).
Durch die Auswirkungen der COVID-19-Pandemie erfährt besonders das IaaS
Segment ein enormes Wachstum (vgl. [*Gartner_Cloud_Trends],[*Cloud_Buch] S. 22), da Homeoffice und der diesbezügliche Ausbau von IT-Infrastruktur im letzten Jahr von vielen Firmen besonders stark vorangetrieben wurde.
Dieser technologische Wandel forciert eine Anpassung der Arbeitsprozesse, Methoden und Tools. Die Umsetzung dessen stellt aktuell für viele Unternehmen eine große Herausforderung dar.
Das erfolgreiche Meistern dieser Herausforderung setzt ein einen grundlegendes Ändern und Evaluieren der Arbeitsmethodik voraus. In der Vergangenheit bewährte Arbeitsprozesse sind im allgemeinen mit der Entwicklung Cloudbasierter Systeme nicht kompatibel, da diese eine iterative Arbeitsweise mit kontinuierlichen Anpassungen erfordert. Insbesondere lineare Modelle wie das Wasserfallmodell stehen in starkem Kontrast zu den heutigen Anforderungen. Das volle Potential von Cloud-Technologien kann daher nur durch den Einsatz entsprechend moderner Arbeitsmethoden ausgeschöpft werden (vgl. [*IaC_Buch] S. 3).

# Zielsetzung

Die für die Industrie wichtigsten Plattformen für Cloud Computing sind Amazon AWS, Microsoft Azure und Google Cloud Platform. Viele Unternehmen besitzen bereits Infrastruktur-Systemen auf diesen Plattformen die manuell erstellt und konfiguriert wurden. Mit wachsender Größe und Komplexität wird das Management dieser Systeme immer komplizierter und fehleranfälliger. Aus diesem Grund wird eine effektivere Arbeitsmethode durch den Einsatz von __Infrastructure as Code__ Prinzipien (IaC) und den dazugehörigen Tools angestrebt. IaC umfasst die folgenden Aufgaben: Infrastruktur Templating, Bereitstellung und Management von Infrastruktur, die initiale Installation und Konfiguration von Anwendungen sowie das Anpassen der installierten Software im weiteren Betrieb. Das Tool Terraform kommt im zweiten der genannten Bereiche zum Einsatz (Abb. 1). Die Unterschiede die beim Einsatz von Terraform mit den drei genannten Cloud Computing Plattformen festgestellt werden können sind der zentrale Untersuchungsgegenstand dieser Arbeit.

## IaC_Tools[2](80)

# Infrastructre as Code mit Terraform

Terraform verwendet eine deklarative domänenspezifische Sprache die sowohl Maschinenfreundlichkeit als
auch Menschenlesbarkeit vereint. Der grundlegende Terraform Workflow besteht
aus vier  Befehlen: __init__, __plan__, __apply__ und __destroy__ (Abb. 2).
Der __terraform init__ Befehl konfiguriert die Terraform CLI und installiert die benötigten Terraform Provider. Diese Provider sind im Kern Plug-Ins welche Terraform ermöglichen mit den verschiedenen Plattformen zu interagieren, es gibt für gewöhnlich einen Provider für jede Plattform. Mit __terraform plan__ wird erfasst welche Elemente des Systems bereits existieren, welche Teile neu im Code definiert wurden und ermittelt dann die Abhängigkeiten die zwischen diesen bestehen. Daraus wird ein Execution Plan erstellt der die Schritte definiert mit welchen der gewünschte Zustand erreicht werden soll.
Die Ausführung eines Execution Plans wird dann durch __terraform apply__
angestoßen. Ein nicht mehr benötigtes System kann durch __terraform destroy__
wieder vollständig abgebaut werden. Terraform erlaubt es große und komplexe Systeme in kleineren, voneinander unabhängigen Modulen zu beschreiben. Diese beinhalten in der Regel alle Resourcen die für eine bestimmte Komponente benötigt werden, es gibt zum Beispiel das __eks__ Modul für AWS das es vereinfacht einen Kubernetes-Cluster in AWS bereitzustellen. Solche Module werden von der Community in einer öffentlichen Public Module Registry
zur freien Verwendung veröffentlicht, grob vergleichbar mit der npm Registry für Nodejs.

## Terraform_Funktionsprinzip[1](100)

# Aufbau des zu vergleichenden Systems

Der exakte Aufbau des zu untersuchenden Systems wird im Verlauf der Arbeit noch konkretisiert. Es soll in jedem Fall aus einer Reihe von typischen Computer Ressourcen zusammengesetzt sein: Netzwerk, Virtuelle Maschinen, Datenbanken, Storage und ein Kubernetes-Cluster. Je nach Plattform werden sich die Systeme leicht unterscheiden, die High-Level Struktur die mithilfe von Modulen definiert werden soll wird dabei beibehalten.

# Auswahl der Vorgehensweise und Vergleichskriterien

Um einen möglichst gut strukturierten und objektiven Vergleich zu gewähren soll nach dem in der ISO/IEC 25040 beschriebenen Prozess zur Evaluierung von Software vorgegangen werden. Als Grundlage der Vergleichskriterien soll die ISO/IEC 25010
__System und Software-Engineering - Qualitätskriterien und Bewertung von System- und Softwareprodukten (SQuaRE) - Bewertungsprozess__ dienen.

# Ausblick

Im Vorfeld ist zu erwarten, dass die drei untersuchten Cloud Service Provider 
AWS, Azure und Google Cloud Platform sich in etwa gleichermaßen für den Einsatz
in einem gewöhnlichen Szenario eignen. Es wäre daher interessant, den Vergleich
in Zukunft auf weitere Anbieter zu erweitern. Alibaba, Oracle, IBM und Tencent
bieten die nächst größten Plattformen für Cloud Computing an. Ein ebenfalls
relevantes Thema ist der Verlgleich von Terraform mit anderen IaC
Tools. Das Tool Pulumi erfüllt die gleiche Aufgabe wie Terraform, ist jedoch jünger und hat daher noch nicht die selbe Verbreitung wie Terraform erreicht. Der auffälligste Unterschied besteht im Einsatz von bekannten imperativen Programmiersprachen welche weitere Möglichkeiten eröffnen könnten.